__version__ = (1, 0, 2)
# *
# *              $$\       $$\   $$\                                   $$\           $$\
# *              $$ |      \__|  $$ |                                  $$ |          $$ |
# *     $$$$$$$\ $$$$$$$\  $$\ $$$$$$\   $$$$$$\$$$$\   $$$$$$\   $$$$$$$ |$$\   $$\ $$ | $$$$$$\   $$$$$$$\
# *    $$  _____|$$  __$$\ $$ |\_$$  _|  $$  _$$  _$$\ $$  __$$\ $$  __$$ |$$ |  $$ |$$ |$$  __$$\ $$  _____|
# *    \$$$$$$\  $$ |  $$ |$$ |  $$ |    $$ / $$ / $$ |$$ /  $$ |$$ /  $$ |$$ |  $$ |$$ |$$$$$$$$ |\$$$$$$\
# *     \____$$\ $$ |  $$ |$$ |  $$ |$$\ $$ | $$ | $$ |$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |$$   ____| \____$$\
# *    $$$$$$$  |$$ |  $$ |$$ |  \$$$$  |$$ | $$ | $$ |\$$$$$$  |\$$$$$$$ |\$$$$$$  |$$ |\$$$$$$$\ $$$$$$$  |
# *    \_______/ \__|  \__|\__|   \____/ \__| \__| \__| \______/  \_______| \______/ \__| \_______|\_______/
# *
# *
# *            ¬© Copyright 2023
# *
# *         https://t.me/shitmodules
# *
# üîí Code is licensed under CC-BY-NC-ND 4.0 unless otherwise specified.
# üåê https://creativecommons.org/licenses/by-nc-nd/4.0/

# You CANNOT edit this file without direct permission from the author.
# You can redistribute this file without any changes.

# scope: hikka_only
# scope: hikka_min 1.6.2

# meta banner: https://raw.githubusercontent.com/kamolgks/assets/main/UsernameChecker.jpg

# meta developer: @shitmodules

import logging

from .. import loader, utils # type: ignore

from telethon.tl.types import Message
from telethon.tl.functions.account import CheckUsernameRequest

logger = logging.getLogger(__name__)


@loader.tds
class UsernameChecker(loader.Module):
    """
    Validates a username and checks availability.

    Accepted characters: A-z (case-insensitive), 0-9 and underscores.
    Length: 5-32 characters.
    """

    strings = {
        "name": "UsernameChecker",
        "true": (
            "<emoji document_id=5215538598970929961>üëå</emoji><i><b>User <u>{}</u> is free and can be used.</b></i>"
        ),
        "noargs": (
            "<emoji document_id=5359839982468996640>ü¶Ü</emoji>"
            "There are no arguments or they are not enough. Example of using this module: "
            "<code>.ucheck myusername</code> (The user must be no shorter than 6 letters)"
        ),
        "false": (
            "<emoji document_id=5854973145315806460>üëÆ‚Äç‚ôÇÔ∏è</emoji>"
            "<i><b>The user <u>{}</u> is already taken by another user, create a new one for yourself.</b></i>"
        ),
        "error": (
            "<emoji document_id=5210952531676504517>‚ùå</emoji>"
            "An error occurred while executing the request: {}"
        ),
    }

    strings_ru = {
        "true": (
            "<emoji document_id=5215538598970929961>üëå</emoji><i><b>–Æ–∑–µ—Ä <u>{}</u> —Å–≤–æ–±–æ–¥–µ–Ω –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.</b></i>"
        ),
        "noargs": (
            "<emoji document_id=5359839982468996640>ü¶Ü</emoji>"
            "–ê—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç –∏–ª–∏ –∏—Ö –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è: "
            "<code>.ucheck musername</code> (–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –∫–æ—Ä–æ—á–µ 6 –±—É–∫–≤)"
        ),
        "false": (
            "<emoji document_id=5854973145315806460>üëÆ‚Äç‚ôÇÔ∏è</emoji>"
            "<i><b>–Æ–∑–µ—Ä <u>{}</u> —É–∂–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –Ω–æ–≤—ã–π.</b></i>"
        ),
        "error": (
            "<emoji document_id=5210952531676504517>‚ùå</emoji>"
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {}"
        ),
    }

    def __init__(self):
        self.name = self.strings["name"]

    async def client_ready(self, client, db):
        self._db = db
        self._client = client

    @loader.command(ru_doc="> –í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    async def ucheck(self, message: Message):
        """> Enter the user for verification"""
        args = utils.get_args_raw(message)
        if not args:
            return await utils.answer(message, self.strings["noargs"])

        try:
            result = await message.client(CheckUsernameRequest(username=args)) # type: ignore
            if result:
                return await utils.answer(message, self.strings["true"].format(args))
            else:
                return await utils.answer(message, self.strings["false"].format(args))
        except Exception as e:
            return await utils.answer(message, self.strings["error"].format(e))
